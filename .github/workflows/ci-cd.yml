name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'eclipse-temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Java application
      run: |
        cd java
        mvn clean compile package -DskipTests
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile.cpu -t algosvc:${{ github.sha }} .
        
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-algosvc -p 8080:8080 algosvc:${{ github.sha }}
        
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8080/health/ready
        
        # Test version endpoint
        curl -f http://localhost:8080/version
        
        # Test inference endpoint
        curl -f -X POST http://localhost:8080/infer \
          -H "Content-Type: application/json" \
          -d '{"x":[-1,0,1], "scale": 1.0}'
        
        # Stop container
        docker stop test-algosvc
        docker rm test-algosvc
        
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: algosvc:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      run: |
        IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/algosvc:${{ github.sha }}
        docker build -f docker/Dockerfile.cpu -t $IMAGE_TAG .
        docker push $IMAGE_TAG
        
        # Also tag as latest for main branch
        docker tag $IMAGE_TAG ghcr.io/${{ github.repository_owner }}/algosvc:latest
        docker push ghcr.io/${{ github.repository_owner }}/algosvc:latest